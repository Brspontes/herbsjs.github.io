(self.webpackChunkherbjs=self.webpackChunkherbjs||[]).push([[127],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,k=d["".concat(u,".").concat(m)]||d[m]||c[m]||s;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94998:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return l},default:function(){return c}});var r=n(22122),a=n(19756),s=(n(67294),n(3905)),i={id:"features",title:"Features",sidebar_label:"Features",slug:"/usecase/features"},o=void 0,u={unversionedId:"usecase/features",id:"usecase/features",isDocsHomePage:!1,title:"Features",description:"Creating a Use Case",source:"@site/docs/usecase/features.md",sourceDirName:"usecase",slug:"/usecase/features",permalink:"/docs/usecase/features",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/usecase/features.md",version:"current",frontMatter:{id:"features",title:"Features",sidebar_label:"Features",slug:"/usecase/features"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/docs/usecase/getting-started"},next:{title:"Steps",permalink:"/docs/usecase/steps"}},l=[{value:"Creating a Use Case",id:"creating-a-use-case",children:[]},{value:"Running a Use Case",id:"running-a-use-case",children:[]},{value:"Request",id:"request",children:[]},{value:"Response",id:"response",children:[]},{value:"Request and Response Types",id:"request-and-response-types",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Authorize",id:"authorize",children:[]},{value:"Context (ctx)",id:"context-ctx",children:[]},{value:"Errors",id:"errors",children:[{value:"Generic Error",id:"generic-error",children:[]},{value:"Structured Error",id:"structured-error",children:[]},{value:"Structured Error list",id:"structured-error-list",children:[]}]},{value:"Audit",id:"audit",children:[]},{value:"Documentation",id:"documentation",children:[]}],p={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"creating-a-use-case"},"Creating a Use Case"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"usecase(description, body)"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"description"),": description of the use case, capturing the use case intent.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"body"),": object containing the use case structure: request, response, setup, authorize and steps.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"return: a Herbs use case instance."))),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Ok, Err, usecase, step, ifElse } = require('@herbsjs/herbs')\nconst createItem = usecase('Create Item', {\n    ... \n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Good descriptions:")),(0,s.kt)("p",null,"\u2705 Update User"),(0,s.kt)("p",null,"\u2705 Reopen Ticket"),(0,s.kt)("p",null,"\u2705 Request Report Generation"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Bad descriptions:")),(0,s.kt)("p",null,"\u274c updateUsers"),(0,s.kt)("p",null,"\u274c Report Gen"),(0,s.kt)("h2",{id:"running-a-use-case"},"Running a Use Case"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},".run(request)"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"request"),": object containing the request values.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"return: a result with an Ok or an Err."))),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const request = { name: 'The best product' }\nconst response = await createProduct.run(request)\n")),(0,s.kt)("h2",{id:"request"},"Request"),(0,s.kt)("p",null,"First, a use case must define the request fields and its types. This information is used as metadata for Glues. It is also used to validate request payload before running the use case."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ request: fields }"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"fields"),": object containing field names and types.")),(0,s.kt)("p",null,"During the use case execution it is possible to read the request value using ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.req"),"."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const updateItem = (injection) =>\n\n    usecase('Update Item', {\n        // Input/Request type validation \n        request: {\n            id: Number,\n            description: String,\n            isDone: Boolean,\n            position: Number\n        }\n        \n        'Retrieve the previous Item from the repository': step(async (ctx) => {\n            const req = ctx.req // request values\n            const ret = await repo.findByID(req.id)\n            ...\n        }),\n")),(0,s.kt)("p",null,"As a validation example, when executed with an ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," that is a string the above use case returns is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const request = { id: '1' }\nconst ret = await usecase.run(request)\n\n// ret.err\n// { request: [{ id :[{ wrongType: \"Number\" }] }] }\n")),(0,s.kt)("h2",{id:"response"},"Response"),(0,s.kt)("p",null,"It is possible to define the response type as well. This information is used as metadata for Glues but it is not validated when running the use case."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ response: type }"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"type"),": response type.")),(0,s.kt)("p",null,"A use case will run all the steps sequencially or until one of the steps return a ",(0,s.kt)("inlineCode",{parentName:"p"},"Err"),". The ",(0,s.kt)("a",{parentName:"p",href:"/docs/usecase/result"},"result")," of a use case is set by the result of the last step executed."),(0,s.kt)("p",null,"The result value of a use case is set by ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.ret"),". It is possible to set this variable any time at any step."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const createProduct = injection =>\n    usecase('Create Product', {\n\n        request: {\n            name: String,\n            ...\n        }\n\n        'Check if the Product is valid': step(ctx => {\n            ...\n            if (!isValid) return Err(errors) // it stops the execution here and return a Err\n            return Ok() // go to the next step\n        }),\n\n        'Save the Product on the repository': step(async ctx => {\n            ...\n            ctx.ret = await repo.insert(product) // set the return value\n            return Ok() // last step and return Ok\n        }),\n")),(0,s.kt)("h2",{id:"request-and-response-types"},"Request and Response Types"),(0,s.kt)("p",null,"A field in a request or the response can be basic types from Javascript or entities:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Number"),": double-precision 64-bit binary format IEEE 754 value"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"String"),": a UTF\u201016 character sequence"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Boolean"),": true or false"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Date"),": represents a single moment in time in a platform-independent format."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Object"),": the Object class represents one of JavaScript's data types."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Array"),": the Array class is a object that is used in the construction of arrays."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Entity"),": entity object represents an gotu base entity."),(0,s.kt)("p",null,"For array of a certain type use: ",(0,s.kt)("inlineCode",{parentName:"p"},"[type]"),". Ex: ",(0,s.kt)("inlineCode",{parentName:"p"},"id: [Number]")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"items: [Item]"),"."),(0,s.kt)("p",null,"The validation will not validatate for presence, so ",(0,s.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," are accepted as valid values."),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Like a constructor, it is the first function to be executed before ",(0,s.kt)("inlineCode",{parentName:"p"},"authorize")," and steps. Can be used to setup the dependency injection, for instance. "),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ setup: ctx => {} }"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ctx"),": execution context - internal object visible throughout the use case and steps execution")),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const addOrUpdateItem = (injection) =>\n\n    usecase('Add or Update an Item on a to-do List', {\n\n        // Pre-run setup\n        setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),\n    ...\n")),(0,s.kt)("h2",{id:"authorize"},"Authorize"),(0,s.kt)("p",null,"A function executed before any steps to make sure the user is authorized to run the use case."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"{ authorize: async (user) => {} }"),", where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"user"),": an object containing the user's information - this information will be audited.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"return: must return ",(0,s.kt)("inlineCode",{parentName:"p"},"Ok")," for authorized and ",(0,s.kt)("inlineCode",{parentName:"p"},"Err")," for unauthorized."))),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const addOrUpdateItem = (injection) =>\n\n    usecase('Add or Update an Item on a to-do List', {\n\n        // Authorization with Audit\n        authorize: async (user) => (user.canAddOrUpdateList ? Ok() : Err()),\n    ...\n")),(0,s.kt)("h2",{id:"context-ctx"},"Context (ctx)"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx")," variable is used to access (read and write) the state of the use case and its steps during its execution."),(0,s.kt)("p",null,"For more details about context, check step context."),(0,s.kt)("h2",{id:"errors"},"Errors"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Err")," object permit you to return simple/custom/structured errors to presentation layer that can be used as metadata by our glues."),(0,s.kt)("h3",{id:"generic-error"},"Generic Error"),(0,s.kt)("p",null,"This error is just an error that don'dt generate any metadata for presentation layer, so you will need to manager itself."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"usecase.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const createProduct = injection =>\n    usecase('Create Product', {\n        'Check if the Product is valid': step(ctx => {\n            ...\n            if (!isValid) return Err('My message or my object')\n        }),\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"presentation.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const result = usecase.run()\nconsole.log(result.isErr) // true\nconsole.log(result.err) // 'My message or my object'\n")),(0,s.kt)("h3",{id:"structured-error"},"Structured Error"),(0,s.kt)("p",null,"This error isn't only a structured error, but this will be useful to be used like an metadata into presentation layer or herbs's glues."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"usecase.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const createProduct = injection =>\n    usecase('Create Product', {\n        'Check if the Product is valid': step(ctx => {\n            ...\n            if (!isValid) {\n                const options = { message: 'message', payload: { entity: 'product' }, cause: {foo: 'bar'} } // the cause can be anything, obj, Err, Error...\n                return Err.notFound('My message or my object')\n            }\n        }),\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"presentation.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const result = usecase.run()\nconsole.log(result.isErr) // true\nconsole.log(result.isNotFoundError) // true\nconsole.log(result.err) // {\n                //     payload: { entity: 'product' },\n                //     cause: {foo: 'bar'},\n                //     code: 'NOT_FOUND',\n                //     message: 'message'\n                //   }\n")),(0,s.kt)("h3",{id:"structured-error-list"},"Structured Error list"),(0,s.kt)("p",null,"All others structured Errors follow a similar same structure"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let myErr = Err.notFound(options)\nmyErr.isNotFoundError // true\nmyErr.err.code // NOT_FOUND\n\nmyErr = Err.alreadyExists(options)\nmyErr.isAlreadyExistsError // true\nmyErr.err.code // ALREADY_EXISTS\n\nmyErr = Err.invalidEntity(options)\nmyErr.isInvalidEntityError // true\nmyErr.err.code // INVALID_ENTITY\n\nmyErr = Err.permissionDenied(options)\nmyErr.isPermissionDeniedError // true\nmyErr.err.code // PERMISSION_DENIED\n\nmyErr = Err.unknown(options)\nmyErr.isUnknownError // true\nmyErr.err.code // UNKNOWN\n\n// the invalidArguments is the only structured error that receive a different option\nmyErr = Err.invalidArguments({ ...options, args: { name: 'cant be empty' }})\nmyErr.isInvalidArgumentsError // true\nmyErr.err.code // INVALID_ARGUMENTS\n\n")),(0,s.kt)("h4",{id:"custom-structured-error"},"Custom structured error"),(0,s.kt)("p",null,"If our structured error dont cover your scenario, you can build your own structured error"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"//Err.buildCustomErr(code, message, payload, cause, caller)\nconst err = Err.buildCustomErr('CUSTOM_ERR', 'message', { entity: 'user' }, {foo: 'bar'}, 'Custom')\nerr.isCustomError // true\nerr.err //{\n        //     payload: { entity: 'user' },\n        //     cause: {foo: 'bar'},\n        //     code: 'CUSTOM_ERR',\n        //     message: 'message'\n        // })\n")),(0,s.kt)("h2",{id:"audit"},"Audit"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"usecase.auditTrail"),": Retrieve the audit trail of a use case after its execution."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const request = { name: 'The best product' }\nconst response = await createProduct.run(request)\nconsole.log(createProduct.auditTrail)\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},'process.env.HERBS_EXCEPTION = "audit"'),": Recommended for ",(0,s.kt)("strong",{parentName:"p"},"production environments")," - Swallow and audit exceptions thrown during the use case execution. This will swallow the exceptions and return a Err on the step. If ",(0,s.kt)("inlineCode",{parentName:"p"},"process.env.HERBS_EXCEPTION")," is not equal ",(0,s.kt)("inlineCode",{parentName:"p"},"audit")," any exceptions thrown during a use case execution will be thrown."),(0,s.kt)("p",null,"Result sample:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    // object type\n    type: 'use case',\n    \n    // use ase description\n    description: 'Add or Update an Item on a to-do List',\n    \n    // unique Id for each use case execution\n    transactionId: '9985fb70-f56d-466a-b466-e200d1d4848c', \n    \n    // total use case execution time in nanosecods\n    elapsedTime: 1981800n, \n\n    // the same user (object) provided on `usecase.authorize(user)`\n    user: { name: 'John', id: '923b8b9a', isAdmin: true },\n\n    // `usecase.authorize(user)` return\n    authorized: true,\n\n    // use case result\n    return: {\n        Ok: { item: { id: 100, name: 'Do not forget this', position: 9 } }\n    },\n\n    // steps\n    steps: [\n        { \n            // object type\n            type: 'step', \n            \n            // use ase description\n            description: 'Check if the Item is valid', \n            \n            // total step execution time in nanosecods\n            elapsedTime: 208201n , \n            \n            // step result\n            return: {} \n        },\n        ...\n    ]\n}\n")),(0,s.kt)("h2",{id:"documentation"},"Documentation"),(0,s.kt)("p",null,"// TODO"))}c.isMDXComponent=!0}}]);